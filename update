{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyNY9WrJrgGIFLEm8Myrr1hF",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/whynot2022/kkkk/blob/main/update\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uQ8cpQLMiDs4"
      },
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import random\n",
        "import math\n",
        "from collections import Counter"
      ],
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "W8zY1IsuiN7S"
      },
      "source": [
        "def data_generator(numClasses, numElems):\n",
        "    data = np.empty((sum(numElems), 2))\n",
        "    target = np.empty(sum(numElems))\n",
        "    \n",
        "    for cl, n in zip(list(range(numClasses)), numElems):\n",
        "\n",
        "      start_pos = sum(numElems[:cl])\n",
        "        \n",
        "      x_c, y_c = random.random() * 5, random.random() * 5\n",
        "        \n",
        "      data[start_pos:start_pos+n,:] = np.random.normal([x_c, y_c], 0.5, (n, 2))\n",
        "      target[start_pos:start_pos+n] = np.full(n, cl)\n",
        "    return data, target"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mf-l6xs2iOHt"
      },
      "source": [
        "data, target = data_generator(3, [100,100,100])\n"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "id": "JLQBZlNpib0j",
        "outputId": "d7dc025f-cc18-45e4-81dc-0b0dddabb581"
      },
      "source": [
        "plt.scatter(data[:,0], data[:,1], c = target)"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7f51b422f190>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3qs3LPalj_0u"
      },
      "source": [
        "from sklearn.model_selection import train_test_split"
      ],
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Q-c0kS_JkAFY"
      },
      "source": [
        "train_data, test_data, train_target, test_target = train_test_split(data, target, test_size =0.1, shuffle = True)"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OTALUDsd7cpU"
      },
      "source": [
        "def distance(a, b):\n",
        "\n",
        "    return np.math.sqrt(np.sum((a - b)*(a-b)))\n",
        "class KNN:\n",
        "    def __init__(self, k):\n",
        "        self.k = k\n",
        "\n",
        "    def fit(self, X_train, y_train):\n",
        "        self.X_train = X_train\n",
        "        self.y_train = y_train\n",
        "    def predict(self, X_test):\n",
        "        y_pred = [self._predict(x) for x in X_test] \n",
        "        y_pred = np.array[y_pred]   \n",
        "    \n",
        "        return y_pred\n",
        "    def _predict(self, x):\n",
        "      self.x = x\n",
        "      dist = [distance(x, x_train) for x_train in self.X_train]\n",
        "      k_neighbours = np.argsort(dist)[:self.k]\n",
        "      k_neighbours = [self.y_train[i] for i in k_neighbours]\n",
        "      leader_neighbour = Counter(k_neighbours).most_common(1)\n",
        "      return leader_neighbour[0][0]"
      ],
      "execution_count": 49,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fPgTfC1K57_v",
        "outputId": "2e03b56d-eae8-487d-b9b3-21741b6108d2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 364
        }
      },
      "source": [
        "a = KNN(3)\n",
        "a.fit = (train_data,test_data)\n",
        "a.predict(test_data)"
      ],
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-50-770ca2945819>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0ma\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mKNN\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mtrain_data\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtest_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-49-4d4f0cf8b9cd>\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, X_test)\u001b[0m\n\u001b[1;32m     10\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0my_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m         \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_predict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mX_test\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m         \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-49-4d4f0cf8b9cd>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     10\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0my_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m         \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_predict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mX_test\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m         \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-49-4d4f0cf8b9cd>\u001b[0m in \u001b[0;36m_predict\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m     18\u001b[0m       \u001b[0mdist\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mdistance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_train\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx_train\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtrain_data\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m       \u001b[0mk_neighbours\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margsort\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdist\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m       \u001b[0mk_neighbours\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mk_neighbours\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m       \u001b[0mleader_neighbour\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCounter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mk_neighbours\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmost_common\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0mleader_neighbour\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-49-4d4f0cf8b9cd>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     18\u001b[0m       \u001b[0mdist\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mdistance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_train\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx_train\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtrain_data\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m       \u001b[0mk_neighbours\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margsort\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdist\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m       \u001b[0mk_neighbours\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mk_neighbours\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m       \u001b[0mleader_neighbour\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCounter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mk_neighbours\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmost_common\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0mleader_neighbour\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'KNN' object has no attribute 'y_train'"
          ]
        }
      ]
    }
  ]
}